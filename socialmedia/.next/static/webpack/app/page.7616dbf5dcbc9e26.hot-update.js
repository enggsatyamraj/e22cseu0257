"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/authService.js":
/*!*************************************!*\
  !*** ./src/services/authService.js ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticatedRequest: () => (/* binding */ authenticatedRequest),\n/* harmony export */   getAuthToken: () => (/* binding */ getAuthToken),\n/* harmony export */   registerCompany: () => (/* binding */ registerCompany)\n/* harmony export */ });\n// src/services/authService.js\n/**\n * Service for handling authentication with the social media analytics API\n */ // API base URL\nconst API_BASE_URL = 'http://20.244.56.144/evaluation-service';\n// Fixed access token - for testing purposes\nconst FIXED_ACCESS_TOKEN = 'rtCHZJ';\n/**\n * Register company with the API server\n * @returns {Promise<Object>} Registration response with clientID and clientSecret\n */ const registerCompany = async (formData)=>{\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData || {\n                \"email\": \"ramkrishna@abc.edu\",\n                \"name\": \"Ram Krishna\",\n                \"mobileNo\": \"9999999999\",\n                \"githubUsername\": \"github\",\n                \"rollNo\": \"aa1bb\",\n                \"collegeName\": \"ABC University\",\n                \"accessCode\": \"rtCHZJ\"\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.message || \"Registration failed: \".concat(response.status),\n                serverResponse: data\n            };\n        }\n        if (true) {\n            // Store credentials in localStorage for future use\n            localStorage.setItem('clientCredentials', JSON.stringify({\n                email: data.email,\n                name: data.name,\n                rollNo: data.rollNo,\n                accessCode: data.accessCode,\n                clientID: data.clientID,\n                clientSecret: data.clientSecret\n            }));\n        }\n        return {\n            success: true,\n            data\n        };\n    } catch (error) {\n        console.error('Registration error:', error);\n        return {\n            success: false,\n            error: error.message || 'Registration failed',\n            serverResponse: null\n        };\n    }\n};\n/**\n * Get authorization token from API\n * @returns {Promise<string>} Bearer token for API access\n */ const getAuthToken = async ()=>{\n    try {\n        if (false) {}\n        // Use the fixed access token for testing if available\n        if (FIXED_ACCESS_TOKEN) {\n            return FIXED_ACCESS_TOKEN;\n        }\n        // Check if token exists in localStorage and not expired\n        const storedToken = localStorage.getItem('authToken');\n        const tokenExpiry = localStorage.getItem('tokenExpiry');\n        if (storedToken && tokenExpiry && Number(tokenExpiry) > Date.now()) {\n            return storedToken;\n        }\n        // Get client credentials from localStorage\n        const credentialsStr = localStorage.getItem('clientCredentials');\n        if (!credentialsStr) {\n            throw new Error('No client credentials found. Please register first.');\n        }\n        const credentials = JSON.parse(credentialsStr);\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"email\": credentials.email,\n                \"name\": credentials.name.toLowerCase(),\n                \"rollNo\": credentials.rollNo,\n                \"accessCode\": credentials.accessCode,\n                \"clientID\": credentials.clientID,\n                \"clientSecret\": credentials.clientSecret\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || \"Auth token request failed: \".concat(response.status));\n        }\n        // Store token and expiry time\n        localStorage.setItem('authToken', data.access_token);\n        localStorage.setItem('tokenExpiry', data.expires_in * 1000 + Date.now());\n        return data.access_token;\n    } catch (error) {\n        console.error('Auth token error:', error);\n        throw error;\n    }\n};\n/**\n * Make authenticated API request\n * @param {string} endpoint - API endpoint to call\n * @param {Object} options - Fetch options\n * @returns {Promise<Object>} API response\n */ const authenticatedRequest = async function(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    try {\n        const token = await getAuthToken();\n        if (!token) {\n            throw new Error('No authentication token available');\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL).concat(endpoint), {\n            ...options,\n            headers: {\n                ...options.headers,\n                'Authorization': \"Bearer \".concat(token),\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"API request failed: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('API request error:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/authService.js\n"));

/***/ })

});